/*
 * Copyright GOSI. All Rights Reserved.
 * This software is the proprietary information of GOSI.
 * Use is subject to license terms.
 */

package sa.gov.gosi.si.em.business.establishment.service;

import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sa.gov.gosi.framework.exception.ExceptionUtils;
import sa.gov.gosi.si.em.business.establishment.EstablishmentMessageKeys;
import sa.gov.gosi.si.em.business.establishment.domain.EstablishmentEntity;
import sa.gov.gosi.si.em.business.establishment.domain.EstablishmentPreferenceEntity;
import sa.gov.gosi.si.em.business.establishment.domain.EstablishmentPreferenceTagEntity;
import sa.gov.gosi.si.em.business.establishment.domain.EstablishmentTagEntity;
import sa.gov.gosi.si.em.business.establishment.enums.EstablishmentTagType;
import sa.gov.gosi.si.em.business.establishment.proxy.repository.EngagementRepository;
import sa.gov.gosi.si.em.business.establishment.repository.EstablishmentPreferenceRepository;
import sa.gov.gosi.si.em.business.establishment.repository.EstablishmentPreferenceTagRepository;
import sa.gov.gosi.si.em.business.establishment.repository.EstablishmentTagRepository;

/**
 * The service interface which defines operations related to Establishment Preference Tag Service.
 */
@Slf4j
@Service("Em_EstablishmentPreferenceTagService")
public class EstablishmentPreferenceTagService {

    @Autowired
    EstablishmentPreferenceService establishmentPreferenceService;

    @Autowired
    EstablishmentPreferenceRepository establishmentPreferenceRepository;

    @Autowired
    EstablishmentTagRepository establishmentTagRepository;

    @Autowired
    EstablishmentPreferenceTagRepository establishmentPreferenceTagRepository;

    @Autowired
    EngagementRepository engagementRepository;

    /**
     * The Exception utils.
     */
    @Autowired
    private ExceptionUtils exceptionUtils;


    /**
     * This method is to save Establishment Preference Tag
     *
     * @param establishmentId the establishment id
     * @param newlyRegistered is establishment newly registered
     */
    public void saveEstablishmentPreferenceTag(Long establishmentId, boolean newlyRegistered) {
        try {
            EstablishmentPreferenceEntity establishmentPreferenceEntity = getEstablishmentPreferenceEntity(establishmentId);
            
            // Get current tag before calculating new one
            EstablishmentTagType currentTag = getCurrentEstablishmentTag(establishmentPreferenceEntity);
            
            EstablishmentPreferenceTagRequest establishmentPreferenceTagRequest =
                prepareEstablishmentPreferenceTagRequest(establishmentPreferenceEntity.getEstablishmentEntity(), newlyRegistered, currentTag);
            
            // load TagEntity
            EstablishmentTagType tag = establishmentPreferenceTagRequest.getTag();
            EstablishmentTagEntity establishmentTagEntity =
                establishmentTagRepository.findByTagName(tag.getDescriptionEng()).orElse(null);
            if (establishmentTagEntity == null) {
                log.error("Establishment Tag Not Found:{}", tag.getDescriptionEng());
                return;
            }
            // check existing Establishment preference Tag
            List<EstablishmentPreferenceTagEntity> estPreferenceTagEntities =
                establishmentPreferenceTagRepository.findAllByEstablishmentPreferenceEntityId(
                    establishmentPreferenceEntity.getId()).orElse(null);
            EstablishmentPreferenceTagEntity establishmentPreferenceTagEntity;
            if (estPreferenceTagEntities == null || estPreferenceTagEntities.isEmpty()) {
                // Add Establishment Preference Tag
                establishmentPreferenceTagEntity = EstablishmentPreferenceTagEntity
                    .builder()
                    .establishmentPreferenceEntity(establishmentPreferenceEntity)
                    .establishmentTagEntity(establishmentTagEntity)
                    .build();
            } else {
                // update Establishment Preference Tag
                establishmentPreferenceTagEntity = estPreferenceTagEntities.get(0);
                // skip updating preference tag in case matches with previous tag
                if (establishmentPreferenceTagEntity.getEstablishmentTagEntity().getId().equals(establishmentTagEntity.getId())) {
                    log.warn("Skipped updating duplicated establishment preference tag:{} for EstablishmentId:{}", tag.getDescriptionEng(), establishmentId);
                    return;
                }
                establishmentPreferenceTagEntity.setEstablishmentTagEntity(establishmentTagEntity);
            }
            establishmentPreferenceTagRepository.save(establishmentPreferenceTagEntity);
        } catch (Exception ex) {
            log.error("Failed to add Establishment Preference Tag for EstId:{}", establishmentId, ex);
        }
    }

    /**
     * This method is to get current Establishment Tag
     *
     * @param establishmentPreferenceEntity the establishment preference entity
     * @return EstablishmentTagType the current tag or null if no tag exists
     */
    private EstablishmentTagType getCurrentEstablishmentTag(EstablishmentPreferenceEntity establishmentPreferenceEntity) {
        List<EstablishmentPreferenceTagEntity> estPreferenceTagEntities =
            establishmentPreferenceTagRepository.findAllByEstablishmentPreferenceEntityId(
                establishmentPreferenceEntity.getId()).orElse(null);
        
        if (estPreferenceTagEntities != null && !estPreferenceTagEntities.isEmpty()) {
            String tagName = estPreferenceTagEntities.get(0).getEstablishmentTagEntity().getTagName();
            return EstablishmentTagType.fromDescriptionEng(tagName);
        }
        return null;
    }

    /**
     * This method is to get Establishment Preference Entity
     *
     * @param establishmentId the establishment id
     * @return EstablishmentPreferenceEntity the establishment preference entity
     */
    public EstablishmentPreferenceEntity getEstablishmentPreferenceEntity(Long establishmentId) {
        Long establishmentPreferenceId = establishmentPreferenceService.getOrCreatePreferenceForEstablishment(establishmentId);
        return establishmentPreferenceRepository.findById(establishmentPreferenceId)
            .orElseThrow(() -> exceptionUtils.createBusinessException(EstablishmentMessageKeys.ESTABLISHMENT_PREFERENCE_NOT_FOUND));
    }

    /**
     * This method is to prepare Establishment Preference Tag Request
     *
     * @param establishmentEntity the establishment entity
     * @param newlyRegistered is establishment newly registered
     * @param currentTag the current tag of the establishment
     * @return EstablishmentPreferenceTagRequest (establishmentId, tag)
     */
    public EstablishmentPreferenceTagRequest prepareEstablishmentPreferenceTagRequest(
            EstablishmentEntity establishmentEntity, boolean newlyRegistered, EstablishmentTagType currentTag) {
        Long establishmentId = establishmentEntity.getId();
        
        if (newlyRegistered) {
            return EstablishmentPreferenceTagRequest.builder()
                .establishmentId(establishmentId)
                .tag(EstablishmentTagType.NEW)
                .build();
        }
        
        // get contributors count
        long numberOfContributors = getContributorsCount(establishmentEntity);
        
        // Determine the tag based on contributor count
        EstablishmentTagType calculatedTag;
        if (numberOfContributors == 0) {
            calculatedTag = EstablishmentTagType.NEW;
        } else if (numberOfContributors <= 5) {
            calculatedTag = EstablishmentTagType.MICRO;
        } else if (numberOfContributors <= 49) {
            calculatedTag = EstablishmentTagType.SMALL;
        } else if (numberOfContributors <= 249) {
            calculatedTag = EstablishmentTagType.MEDIUM;
        } else {
            calculatedTag = EstablishmentTagType.LARGE;
        }
        
        // Apply the business rule: Once moved from NEW, cannot go back to NEW
        // Minimum tag should be MICRO if establishment was previously not NEW
        if (calculatedTag == EstablishmentTagType.NEW && currentTag != null && currentTag != EstablishmentTagType.NEW) {
            log.info("Establishment {} has 0 contributors but was previously {}. Keeping minimum tag as MICRO.", 
                establishmentId, currentTag);
            calculatedTag = EstablishmentTagType.MICRO;
        }
        
        return EstablishmentPreferenceTagRequest.builder()
            .establishmentId(establishmentId)
            .tag(calculatedTag)
            .build();
    }

    /**
     * This method is to get Establishment Contributors Count
     *
     * @param establishmentEntity the establishment entity
     * @return long the contributors count
     */
    public long getContributorsCount(EstablishmentEntity establishmentEntity) {
        return engagementRepository.getNumOfActiveContributorsByEstablishmentId(establishmentEntity.getId());
    }


    public List<EstablishmentPreferenceTagEntity> getByEstablishmentPreferenceId(Long PreferenceId) {
        return establishmentPreferenceTagRepository.findAllByEstablishmentPreferenceEntityId(PreferenceId).orElse(null);
    }
}
