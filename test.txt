# 🔐 Apigee KVM (Key-Value Maps) Setup Guide

## Overview
KVM (Key-Value Maps) provides secure, centralized configuration management in Apigee. This is the **recommended approach for production** instead of hardcoding values in application.properties.

---

## 🎯 Benefits of Using KVM

✅ **Security**: Encrypt sensitive data (API keys, passwords)  
✅ **Centralized**: Manage configs across multiple proxies  
✅ **Environment-specific**: Different values for dev/test/prod  
✅ **No code changes**: Update values without redeploying backend  
✅ **Audit trail**: Track who changed what and when  

---

## 📋 Step-by-Step Instructions

### Step 1: Create KVM in Apigee

#### 1.1 Navigate to KVM Console
```
Apigee Edge Console → Admin → Environments → Key Value Maps
```

#### 1.2 Select Environment
Choose the environment where you want to create KVM:
- `dev`
- `test`
- `prod`

**Note:** You need to create KVM separately for each environment.

#### 1.3 Create New KVM

Click **+ Key Value Map** button

| Field | Value | Notes |
|-------|-------|-------|
| **Name** | `owner-sphere-config` | Must be same across all environments |
| **Encrypted** | ✅ **Yes** | Recommended for API keys |

Click **Add** button.

---

### Step 2: Add Key-Value Entries

#### 2.1 Add Entries to KVM

For each environment (dev/test/prod), add these entries:

| Key | Value (Dev) | Value (Test) | Value (Prod) | Encrypted |
|-----|------------|--------------|--------------|-----------|
| `api.base.url` | `https://apigee-dev.gosi.sa` | `https://apigee-test.gosi.sa` | `https://apigee.gosi.sa` | No |
| `app.apikey` | `LLrquEpkhNG2O3E19H36Rp0wNlY4rj8s` | `<TEST_API_KEY>` | `<PROD_API_KEY>` | ✅ Yes |
| `osb.ai.timeout` | `10000` | `10000` | `5000` | No |

**To add each entry:**
1. Click **+ Entry**
2. Enter **Key** name
3. Enter **Value**
4. Click **Add**

---

### Step 3: Create Apigee Policy to Read KVM

#### 3.1 Create KVM-GetConfig.xml Policy

This policy will be added to **Apigee Proxy #2** (OSB → AI proxy).

**File:** `apiproxy/policies/KVM-GetConfig.xml`

```xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<KeyValueMapOperations name="KVM-GetConfig" mapIdentifier="owner-sphere-config">
    <Scope>environment</Scope>
    <Get assignTo="private.api.base.url">
        <Key>
            <Parameter>api.base.url</Parameter>
        </Key>
    </Get>
    <Get assignTo="private.app.apikey">
        <Key>
            <Parameter>app.apikey</Parameter>
        </Key>
    </Get>
    <Get assignTo="private.osb.ai.timeout">
        <Key>
            <Parameter>osb.ai.timeout</Parameter>
        </Key>
    </Get>
</KeyValueMapOperations>
```

**Explanation:**
- `mapIdentifier`: Name of your KVM (`owner-sphere-config`)
- `Scope`: `environment` (can also be `organization` or `apiproxy`)
- `Get assignTo`: Creates flow variables you can reference later
- `private.*`: Variables prefixed with `private` are not exposed in response

#### 3.2 Add Policy to Proxy Flow

Edit your **Proxy #2** flow configuration:

**File:** `apiproxy/proxies/default.xml`

```xml
<ProxyEndpoint name="default">
    <PreFlow>
        <Request>
            <!-- Step 1: Verify API Key from UI request -->
            <Step>
                <Name>VerifyAPIKey</Name>
            </Step>
            
            <!-- Step 2: Get configuration from KVM -->
            <Step>
                <Name>KVM-GetConfig</Name>
            </Step>
            
            <!-- Step 3: Security checks -->
            <Step>
                <Name>AmeenSecurityCheck</Name>
            </Step>
        </Request>
    </PreFlow>
    
    <!-- ... rest of flow ... -->
</ProxyEndpoint>
```

---

### Step 4: Use KVM Values in Target Connection

#### 4.1 Dynamic Target URL

**File:** `apiproxy/targets/default.xml`

```xml
<TargetEndpoint name="default">
    <HTTPTargetConnection>
        <!-- Use KVM variable for base URL -->
        <URL>{private.api.base.url}/osb/ai/suggestions</URL>
        
        <LoadBalancer>
            <Server name="OSB-Server-1"/>
        </LoadBalancer>
    </HTTPTargetConnection>
    
    <PreFlow>
        <Request>
            <!-- Add API key from KVM to request header -->
            <Step>
                <Name>AssignMessage-AddAPIKey</Name>
            </Step>
        </Request>
    </PreFlow>
</TargetEndpoint>
```

#### 4.2 Create Policy to Add API Key Header

**File:** `apiproxy/policies/AssignMessage-AddAPIKey.xml`

```xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<AssignMessage name="AssignMessage-AddAPIKey">
    <Set>
        <Headers>
            <!-- Add API key from KVM to outgoing request -->
            <Header name="apikey">{private.app.apikey}</Header>
            
            <!-- Optional: Add timeout header -->
            <Header name="timeout">{private.osb.ai.timeout}</Header>
        </Headers>
    </Set>
    <IgnoreUnresolvedVariables>false</IgnoreUnresolvedVariables>
    <AssignTo createNew="false" type="request"/>
</AssignMessage>
```

---

## 🔧 Backend Configuration (No Changes Needed!)

### Current Setup (application.properties)
```properties
api.base.url=https://apigee.gosi.sa
app.apikey=LLrquEpkhNG2O3E19H36Rp0wNlY4rj8s
osb.ai.timeout=10000
```

### With KVM Setup
Your backend (`OsbAiProxy.java`) will continue to use `application.properties` values:

```java
@Value("${api.base.url}")
private String apiBaseUrl;

@Value("${app.apikey}")
private String apiKey;

@Value("${osb.ai.timeout}")
private int timeout;
```

**Key Point:** 
- KVM is used **inside Apigee** (between Apigee Proxy #2 → OSB → AI)
- Your backend still uses `application.properties` (between OWS → Apigee Proxy #2)
- This provides **two layers** of configuration

---

## 🎯 Two Configuration Layers

### Layer 1: Backend → Apigee Proxy #2
**Source:** `application.properties` in your Spring Boot app

```
OWS Backend → Apigee Proxy #2
Uses: app.apikey from application.properties
```

### Layer 2: Apigee Proxy #2 → OSB → AI
**Source:** KVM in Apigee

```
Apigee Proxy #2 → OSB → AI Service
Uses: KVM values (can be different per environment)
```

---

## 📊 Environment-Specific Configuration

### Development Environment
```
KVM: owner-sphere-config (dev)
├── api.base.url = https://apigee-dev.gosi.sa
├── app.apikey = LLrquEpkhNG2O3E19H36Rp0wNlY4rj8s
└── osb.ai.timeout = 10000
```

### Test Environment
```
KVM: owner-sphere-config (test)
├── api.base.url = https://apigee-test.gosi.sa
├── app.apikey = <DIFFERENT_TEST_KEY>
└── osb.ai.timeout = 10000
```

### Production Environment
```
KVM: owner-sphere-config (prod)
├── api.base.url = https://apigee.gosi.sa
├── app.apikey = <DIFFERENT_PROD_KEY>
└── osb.ai.timeout = 5000  (faster timeout for prod)
```

---

## ✅ Testing KVM Configuration

### Test 1: Verify KVM Exists
```
Apigee Console → Admin → Environments → dev → Key Value Maps
Confirm: owner-sphere-config is listed
```

### Test 2: Test in Apigee Trace

1. Open Apigee Proxy #2
2. Click **Trace** tab
3. Start trace session
4. Send test request
5. Verify in trace:
   - `KVM-GetConfig` policy executed successfully
   - Variables populated: `private.api.base.url`, `private.app.apikey`

### Test 3: Check Variable Values

Add a debug policy to see KVM values:

**File:** `apiproxy/policies/Debug-KVMValues.xml`

```xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<JavaScript name="Debug-KVMValues" timeLimit="200">
    <Source>
        print("API Base URL: " + context.getVariable("private.api.base.url"));
        print("API Key: " + context.getVariable("private.app.apikey"));
        print("Timeout: " + context.getVariable("private.osb.ai.timeout"));
    </Source>
</JavaScript>
```

---

## 🔒 Security Best Practices

### 1. Always Encrypt Sensitive Data
```
KVM Creation:
☑ Encrypted = Yes (for API keys, passwords, tokens)
☐ Encrypted = No (for URLs, timeouts, non-sensitive data)
```

### 2. Use Different Keys per Environment
- **Dev:** Development key (can be shared)
- **Test:** Test key (restricted access)
- **Prod:** Production key (highly restricted, rotated regularly)

### 3. Limit KVM Access
```
Apigee Console → Admin → Roles
Create role with KVM read-only access
Assign to developers (not full admin)
```

### 4. Audit KVM Changes
```
Apigee Console → Admin → Audit Logs
Filter by: Key Value Maps
Review: Who changed what and when
```

---

## 🚨 Troubleshooting

### Issue: KVM variable is undefined

**Cause:** KVM policy not executed or wrong variable name

**Solution:**
1. Check policy order in flow (KVM-GetConfig should run early)
2. Verify variable name: `{private.api.base.url}` (with curly braces)
3. Check KVM scope: `environment` vs `organization`

### Issue: Encrypted values not decrypting

**Cause:** KVM not created as encrypted

**Solution:**
1. Delete existing KVM
2. Recreate with **Encrypted = Yes**
3. Re-add all entries

### Issue: Different values in different environments

**Cause:** This is **expected behavior** - that's the point of KVM!

**Solution:**
- Verify each environment has correct values
- Use Apigee Trace to see actual values used

---

## 📋 KVM Setup Checklist

### Environment: Dev
- [ ] Create KVM: `owner-sphere-config` (encrypted)
- [ ] Add entry: `api.base.url`
- [ ] Add entry: `app.apikey` (encrypted)
- [ ] Add entry: `osb.ai.timeout`
- [ ] Create policy: `KVM-GetConfig.xml`
- [ ] Update Proxy #2 flow to use KVM
- [ ] Test in Apigee Trace

### Environment: Test
- [ ] Create KVM: `owner-sphere-config` (encrypted)
- [ ] Add entry: `api.base.url`
- [ ] Add entry: `app.apikey` (encrypted)
- [ ] Add entry: `osb.ai.timeout`
- [ ] Verify same policies work in test

### Environment: Prod
- [ ] Create KVM: `owner-sphere-config` (encrypted)
- [ ] Add entry: `api.base.url`
- [ ] Add entry: `app.apikey` (encrypted)
- [ ] Add entry: `osb.ai.timeout`
- [ ] Verify same policies work in prod
- [ ] Set up API key rotation schedule

---

## 🔄 Next Steps After KVM Setup

Once KVM is configured:

1. ✅ KVM created in all environments
2. ⏳ Create Apigee Proxy #2 (use KVM values)
3. ⏳ Test end-to-end flow
4. ⏳ Update documentation with actual KVM names

---

## 📝 Summary

| Item | Value | Status |
|------|-------|--------|
| **KVM Name** | `owner-sphere-config` | ⏳ |
| **Encrypted** | Yes | ⏳ |
| **Environments** | dev, test, prod | ⏳ |
| **Entries** | 3 (api.base.url, app.apikey, osb.ai.timeout) | ⏳ |
| **Policies Created** | KVM-GetConfig.xml, AssignMessage-AddAPIKey.xml | ⏳ |

---

**Questions?**

Need help with:
- Creating KVM in Apigee Console?
- Writing KVM policies?
- Testing KVM values?

Let me know! 🚀

---

**Last Updated:** October 26, 2025  
**Status:** Ready for KVM creation
