I'll provide a comprehensive explanation of the admin termination notification implementation with detailed code snippets for every component.

## Complete Admin Termination Notification Implementation

### 1. Entry Point: AdminService.terminateAdmin()

Let me first check the AdminService to show you the integration point: 

Searched text for `terminateAdmin|notifyAdminOnRemoval` (`**/AdminService.java`), 4 results

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/admin/service/AdminService.java#770-770), lines 770 to 850

### 2. Main Notification Method: notifyAdminOnRemoval 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/service/EstablishmentNotificationService.java#2910-2910), lines 2910 to 2959

### 3. Individual Establishment Logic: notifyAdminTerminationForIndividualEstablishment 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/service/EstablishmentNotificationService.java#2950-2950), lines 2950 to 3015

### 4. Supporting Method: notifyAdminByRole 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/service/EstablishmentNotificationService.java#2805-2805), lines 2805 to 2828

### 5. Helper Method: findTargetAdmin 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/service/EstablishmentNotificationService.java#2830-2830), lines 2830 to 2870

### 6. Notification Sender: sendNotificationToAdmin 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/service/EstablishmentNotificationService.java#2871-2871), lines 2871 to 2909

Now let me check the notification templates and enums used: 

Searched text for `NOTIFY_REMOVED_ADMIN|NOTIFY_ESTABLISHMENT_SUPER_ADMIN_WHEN_ADMIN_REMOVED` (`**/*NotificationTemplate*.java`), no results

Searched for files matching `**/*NotificationTemplate*`, no matches

Searched text for `enum.*NotificationTemplate` (`**/*.java`), 12 results

Let me check the Role enum as well: 

Searched text for `enum.*Role` (`**/*.java`), 20 results

## Complete Implementation Explanation with Code Snippets

### **1. Entry Point: AdminService.terminateAdmin()**

The admin termination flow starts in the `AdminService.terminateAdmin()` method:

```java
public void terminateAdmin(Long roleId, Long registrationNo, Long loginPersonId, Long personId, String identifier) {
    EstablishmentEntity establishment = establishmentFactory.findByRegistrationNo(registrationNo);
    
    // ... admin termination logic ...
    
    // Key notification call at the end
    establishmentNotificationService.notifyAdminOnRemoval(establishment, personId, transactionTraceId);
}
```

**What happens:** After deactivating the admin, the service calls the notification method to inform relevant parties.

---

### **2. Main Notification Method: notifyAdminOnRemoval()**

```java
public void notifyAdminOnRemoval(EstablishmentEntity establishment, Long personId, Long transactionTraceId) {
    Map<String, String> messageAttributes = new HashMap<>();
    AdminEntity removedAdmin = establishment.getAdmin(personId);

    // Prepare admin names for notification
    String removedAdminNameAr = removedAdmin.getPerson().getArabicFullName() != null ?
        removedAdmin.getPerson().getArabicFullName() : "";
    String removedAdminNameEn = removedAdmin.getPerson().getName().getNameEnglish() != null ?
        removedAdmin.getPerson().getName().getNameEnglish() : removedAdminNameAr;

    // Build message attributes for notifications
    messageAttributes.put(EstablishmentNotificationMsgAttributes.REGISTRATION_NUMBER.getCode(),
        establishment.getRegistrationNo().toString());
    messageAttributes.put(EstablishmentNotificationMsgAttributes.REQUEST_NUMBER.getCode(),
        String.valueOf(transactionTraceId));
    messageAttributes.put(EstablishmentNotificationMsgAttributes.TAMINATY_URL.getCode(), taminatyUrl);
    messageAttributes.put(EstablishmentNotificationMsgAttributes.ADMIN_NAME_AR.getCode(), removedAdminNameAr);
    messageAttributes.put(EstablishmentNotificationMsgAttributes.ADMIN_NAME_EN.getCode(), removedAdminNameEn);

    List<String> communicationChannels = Collections.singletonList(
        CommunicationChannel.SMS.getDescription()
    );

    // 1. Send notification to terminated/deactivated admin
    sendNotificationToAdmin(
        establishment,
        NotificationTemplate.NOTIFY_REMOVED_ADMIN.getCode(),
        Collections.singletonList(removedAdmin),
        messageAttributes,
        communicationChannels
    );

    // 2. Send notification to remaining admins or owners
    if (establishment.isPrivate()) { // Individual establishment
        notifyAdminTerminationForIndividualEstablishment(establishment, personId, messageAttributes, communicationChannels);
    } else { // Non-individual establishment
        notifyAdminByRole(establishment.getId(),
            NotificationTemplate.NOTIFY_ESTABLISHMENT_SUPER_ADMIN_WHEN_ADMIN_REMOVED.getCode(),
            false,
            messageAttributes,
            communicationChannels,
            Role.SUPER_ADMIN);
    }
}
```

**What happens:** 
- âœ… **Two notifications are sent**: one to the terminated admin, one to remaining admin/owner
- âœ… **Branch logic**: Different handling for individual vs non-individual establishments
- âœ… **Message attributes**: Contains all necessary data (registration number, admin name, etc.)

---

### **3. Individual Establishment Logic: notifyAdminTerminationForIndividualEstablishment()**

```java
private void notifyAdminTerminationForIndividualEstablishment(EstablishmentEntity establishment, 
                                                              Long terminatedPersonId,
                                                              Map<String, String> messageAttributes,
                                                              List<String> communicationChannels) {
    // Get active super admins EXCLUDING the terminated one
    List<AdminEntity> activeSuperAdmins = establishment.getActiveAdmins().stream()
        .filter(admin -> !admin.getPerson().getId().equals(terminatedPersonId)) // ðŸ”‘ KEY FILTER
        .filter(admin -> admin.getAdminRoles().stream()
            .anyMatch(role -> role.getRole().getId().equals(Long.valueOf(Role.SUPER_ADMIN.getCode())) 
                      && role.isEndDateEmpty()))
        .collect(Collectors.toList());

    if (!activeSuperAdmins.isEmpty()) {
        // Case 1: Active super admin found - notify them
        sendNotificationToAdmin(
            establishment,
            NotificationTemplate.NOTIFY_ESTABLISHMENT_SUPER_ADMIN_WHEN_ADMIN_REMOVED.getCode(),
            Collections.singletonList(activeSuperAdmins.get(0)),
            messageAttributes,
            communicationChannels
        );
    } else {
        // Case 2: No active super admin found - notify owner (YOUR USER STORY REQUIREMENT)
        List<OwnerEntity> activeOwners = establishment.getOwners().stream()
            .filter(owner -> owner.getEndDate() == null)
            .collect(Collectors.toList());
            
        if (!activeOwners.isEmpty()) {
            OwnerEntity activeOwner = activeOwners.get(0);
            AdminEntity ownerAsAdmin = AdminEntity.builder()
                .person(activeOwner.getPerson())
                .build();
                
            sendNotificationToAdmin(
                establishment,
                NotificationTemplate.NOTIFY_ESTABLISHMENT_SUPER_ADMIN_WHEN_ADMIN_REMOVED.getCode(),
                Collections.singletonList(ownerAsAdmin),
                messageAttributes,
                communicationChannels
            );
        }
    }
}
```

**What happens:**
- âœ… **Excludes terminated admin** from super admin check (critical requirement)
- âœ… **Owner fallback** when no active super admins exist (your user story requirement)
- âœ… **Individual establishment specific** logic

---

### **4. Supporting Method: notifyAdminByRole() (Used for Non-Individual Establishments)**

```java
public void notifyAdminByRole(Long establishmentId,
                              String templateId,
                              boolean notifyAll,
                              Map<String, String> messageAttributes,
                              List<String> communicationChannel,
                              Role... roles) {
    EstablishmentEntity establishmentEntity = aggregateFactory.findById(establishmentId);
    if (establishmentEntity == null) return;

    List<AdminEntity> adminList = establishmentEntity.getActiveAdmins();
    if (adminList == null || adminList.isEmpty()) return;

    List<AdminEntity> targetAdmin = findTargetAdmin(establishmentEntity, adminList, notifyAll, roles);

    if (!targetAdmin.isEmpty()) {
        sendNotificationToAdmin(establishmentEntity, templateId, targetAdmin, messageAttributes, communicationChannel);
    }
}
```

**What happens:** Generic role-based notification method used for non-individual establishments.

---

### **5. Admin Finding Logic: findTargetAdmin()**

```java
private List<AdminEntity> findTargetAdmin(EstablishmentEntity establishmentEntity,
                                          List<AdminEntity> admins,
                                          boolean notifyAll,
                                          Role... roles) {
    if (ObjectUtils.isEmpty(roles)) {
        roles = new Role[]{Role.SUPER_ADMIN, Role.ADMIN}; // Default roles
    }
    
    for (Role role : roles) {
        List<AdminEntity> matchedAdmin = admins.stream()
            .filter(a -> a.getAdminRoles().stream()
                .anyMatch(r -> r.getRole().getId().equals(Long.valueOf(role.getCode()))))
            .collect(Collectors.toList());

        if (!matchedAdmin.isEmpty()) {
            return notifyAll ? matchedAdmin : Collections.singletonList(matchedAdmin.get(0));
        } else if (establishmentEntity.isPrivate()) {
            // Owner fallback for private establishments
            establishmentEntity.getOwners().stream()
                .filter(o -> o.getEndDate() == null)
                .findFirst()
                .ifPresent(owner -> matchedAdmin.add(
                    AdminEntity.builder().person(owner.getPerson()).build()
                ));
            return !ObjectUtils.isEmpty(matchedAdmin) ?
                Collections.singletonList(matchedAdmin.get(0)) : Collections.emptyList();
        }
    }
    return Collections.emptyList();
}
```

**What happens:** Finds target admins by role with owner fallback for private establishments.

---

### **6. Notification Sender: sendNotificationToAdmin()**

```java
private void sendNotificationToAdmin(EstablishmentEntity establishment,
                                     String templateId,
                                     List<AdminEntity> admins,
                                     Map<String, String> messageAttributes,
                                     List<String> channels) {
    for (AdminEntity admin : admins) {
        PersonViewEntity person = admin.getPerson();
        PersonId personId = personViewService.getPersonIdFromIdentifier(person, null);
        if (personId == null) continue;

        AmeenNotification notification = AmeenNotification.builder()
            .templateId(templateId)
            .establishmentRegistrationNo(String.valueOf(establishment.getRegistrationNo()))
            .messageData(messageAttributes)
            .targetApp(TargetApp.BUSINESS)
            .personId(personId)
            .build();

        notification.setCommunicationChannels(channels);
        sendNotificationEvent(notification);
    }
}
```

**What happens:** Actual notification sending to the Ameen notification system.

---

## **Flow Summary: Your User Story Requirements**

### **User Story: "As a establishment admin I want to get a notification when account is deactivated"**

**âœ… IMPLEMENTED:**
```java
// Step 1: Terminated admin gets notified
sendNotificationToAdmin(
    establishment,
    NotificationTemplate.NOTIFY_REMOVED_ADMIN.getCode(), // Admin termination template
    Collections.singletonList(removedAdmin), // The terminated admin
    messageAttributes,
    communicationChannels
);
```

### **Requirement: "for individual company i want to check if there are no active super admins send the notification to owners"**

**âœ… IMPLEMENTED:**
```java
// Step 2: Check for active super admins EXCLUDING terminated one
List<AdminEntity> activeSuperAdmins = establishment.getActiveAdmins().stream()
    .filter(admin -> !admin.getPerson().getId().equals(terminatedPersonId)) // EXCLUDE terminated
    .filter(admin -> /* has SUPER_ADMIN role */)
    .collect(Collectors.toList());

if (!activeSuperAdmins.isEmpty()) {
    // Notify remaining super admin
} else {
    // NO super admins found - notify OWNER instead
    List<OwnerEntity> activeOwners = establishment.getOwners().stream()
        .filter(owner -> owner.getEndDate() == null)
        .collect(Collectors.toList());
    // Send notification to owner
}
```

---

## **Key Components Used:**

### **Enums and Templates:**
- `Role.SUPER_ADMIN` - Super admin role identification
- `NotificationTemplate.NOTIFY_REMOVED_ADMIN` - Template for terminated admin
- `NotificationTemplate.NOTIFY_ESTABLISHMENT_SUPER_ADMIN_WHEN_ADMIN_REMOVED` - Template for remaining admins/owners
- `CommunicationChannel.SMS` - SMS notification channel

### **Entity Relationships:**
- `EstablishmentEntity` â†’ `AdminEntity` (active admins)
- `EstablishmentEntity` â†’ `OwnerEntity` (owners)
- `AdminEntity` â†’ `PersonViewEntity` (person details)
- `AdminEntity` â†’ `AdminRoleEntity` (role assignments)

### **Business Logic:**
- `establishment.isPrivate()` - Identifies individual establishments
- `owner.getEndDate() == null` - Identifies active owners
- `role.isEndDateEmpty()` - Identifies active admin roles

This implementation fully satisfies your user story requirements with proper individual establishment handling and owner fallback logic.
