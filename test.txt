AbdallahAhmed6520: User Story: 

As a establishment admin I want to get a notification when account is deactivated so that I can know the transaction is done 

 

As is:{}

there is no notification related to deactivate admin transaction 

 

To be: 

to send a notification to the admin that deactivates his account 

and send a notification to the super admin of that establishment and if there is no super admin send it to the active owner 

 

AC

Induvial establishment owners only 

 

Notification attached 

 

send notification to terminated admin + (current super admin or owner for induvial establishment in case there is no active super admin)

------------------------------

API: (v1/admin/1724293111/terminate?registrationNo=628660158&personId=1020914541).

BE only 
-----------------
this story is alreadt implemented but i want to review the implementations and tell me what is not implemented


GitHub Copilot: I'll help you review the implementation for the notification system when an establishment admin account is deactivated. Let me first explore the codebase to understand the current implementation. 

Searched codebase for "admin terminate deactivate notification establishment", 12 results

Now let me search for the terminate endpoint specifically: 

Searched text for `terminate.*admin|admin.*terminate` (`**/*.java`), 20 results

Let me search specifically for the terminate admin method: 

Searched text for `terminateAdmin|terminate.*Admin` (`**/AdminService.java`), 1 result

Let me read the terminate admin method: 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/admin/service/AdminService.java#770-770), lines 770 to 830

Let me see the rest of the terminateAdmin method: 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/admin/service/AdminService.java#830-830), lines 830 to 840

Let me see if there's more to this method: 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/admin/service/AdminService.java#840-840), lines 840 to 850

Great! Now let me check the API controller that calls this terminate method: 

Searched text for `terminateAdmin` (`**/AdminController.java`), no results

Let me search for the controller that handles the terminate endpoint: 

Searched text for `terminate.*mapping|@PostMapping.*terminate` (`**/*.java`), 1 result

Let me search for the implementation of this API: 

Searched for files matching `**/AdminController.java`, no matches

Searched for files matching `**/*Controller.java`, no matches

Let me search more broadly: 

Searched text for `implements.*AdminApi` (`**/*.java`), 1 result

Now let me check the AdminApiImpl class: 

Searched text for `terminateAdmin` (`**/AdminApiImpl.java`), 3 results

Let me read the terminateAdmin implementation in AdminApiImpl: 

Read [](file:///c%3A/Projects/establishment-management/em-api/src/main/java/sa/gov/gosi/si/em/api/establishment/admin/AdminApiImpl.java#120-120), lines 120 to 150

Now let me check the notification service method that is called from the terminateAdmin method. I found that it calls `establishmentNotificationService.notifyAdminOnRemoval(establishment, personId,transactionTraceId)`: 

Searched text for `notifyAdminOnRemoval` (`**/EstablishmentNotificationService.java`), 1 result

Let me read the notifyAdminOnRemoval method: 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/service/EstablishmentNotificationService.java#2905-2905), lines 2905 to 2955

Now let me check what notifyAdminByRole does: 

Searched text for `notifyAdminByRole.*\{` (`**/EstablishmentNotificationService.java`), no results

Searched text for `public void notifyAdminByRole` (`**/EstablishmentNotificationService.java`), 1 result

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/service/EstablishmentNotificationService.java#2810-2810), lines 2810 to 2890

Let me see the rest of this method: 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/service/EstablishmentNotificationService.java#2890-2890), lines 2890 to 2910

Now let me check the notification templates to see what they contain: 

Searched text for `NOTIFY_ESTABLISHMENT_SUPER_ADMIN_WHEN_ADMIN_REMOVED|NOTIFY_REMOVED_ADMIN` (`**/*.java`), 2 results

Let me find the NotificationTemplate enum: 

Searched text for `enum.*NotificationTemplate|NOTIFY_ESTABLISHMENT_SUPER_ADMIN_WHEN_ADMIN_REMOVED.*=` (`**/*.java`), 11 results

It looks like NotificationTemplate is in the common library. Let me check if it exists in our project: 

Searched text for `NOTIFY_ESTABLISHMENT_SUPER_ADMIN_WHEN_ADMIN_REMOVED` (`**/*.java`), 1 result

Searched text for `NOTIFY_REMOVED_ADMIN` (`**/*.java`), 1 result

Now let me check if there's also a specific logic for individual establishments. Let me check the findTargetAdmin method more closely by analyzing what it does when there's no super admin: 

Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/service/EstablishmentNotificationService.java#2840-2840), lines 2840 to 2880

Now let me check what isPrivate() method does on the EstablishmentEntity: 

Searched text for `public.*boolean.*isPrivate|boolean.*isPrivate\(\)` (`**/*.java`), 1 result

Continue to iterate?
[object Object]

AbdallahAhmed6520: @agent Continue: "Continue to iterate?"

GitHub Copilot: Read [](file:///c%3A/Projects/establishment-management/establishment/src/main/java/sa/gov/gosi/si/em/business/establishment/domain/EstablishmentEntity.java#710-710), lines 710 to 715

Now let me check what the user story requires more carefully. The user story says:

1. Send notification to terminated admin
2. Send notification to super admin OR owner for individual establishment in case there is no active super admin
3. AC: Individual establishment owners only

Let me verify if the current implementation handles these requirements properly by looking at the API path mentioned: `v1/admin/1724293111/terminate?registrationNo=628660158&personId=1020914541`

Let me check how individual establishments are identified: 

Searched text for `individual.*establishment|establishment.*individual` (`**/*.java`), 20 results

Let me check what makes an establishment "individual": 

Searched text for `LegalEntityType.*INDIVIDUAL|INDIVIDUAL.*LegalEntityType` (`**/*.java`), no results

Searched text for `LegalEntityType` (`**/*.java`), 20 results

Let me check the LegalEntityType enum: 

Searched text for `PRIVATE_COMPANY.*=` (`**/*.java`), 10 results

Based on my analysis, let me check what exactly makes an establishment "individual" according to the AC (Acceptance Criteria). Let me look for specific legal entity types that might represent individual establishments: 

Searched text for `INDIVIDUAL|SOLE_PROPRIETORSHIP` (`**/*.java`), 20 results

Now let me examine the current implementation more closely. Looking at the code analysis, I can provide you with a comprehensive review:

## Current Implementation Review

### **What is Currently Implemented:**

1. **Admin Termination API**: ✅ **IMPLEMENTED**
   - API endpoint: `POST /v1/admin/{id}/terminate?registrationNo={registrationNo}&personId={personId}`
   - Implementation in `AdminApiImpl.terminateAdmin()` method
   - Calls `AdminService.terminateAdmin()` method

2. **Notification System**: ✅ **IMPLEMENTED**
   - At the end of `terminateAdmin()` method, it calls:
   ```java
   establishmentNotificationService.notifyAdminOnRemoval(establishment, personId, transactionTraceId);
   ```

3. **Dual Notification Logic**: ✅ **IMPLEMENTED**
   - **To Terminated Admin**: Uses template `NOTIFY_REMOVED_ADMIN`
   - **To Super Admin/Owner**: Uses template `NOTIFY_ESTABLISHMENT_SUPER_ADMIN_WHEN_ADMIN_REMOVED`

4. **Fallback to Owner Logic**: ✅ **IMPLEMENTED** 
   - In `findTargetAdmin()` method:
   ```java
   } else if (establishmentEntity.isPrivate()) {
       establishmentEntity.getOwners().stream()
           .filter(o -> o.getEndDate() == null)
           .findFirst()
           .ifPresent(owner -> matchedAdmin.add(
               AdminEntity.builder().person(owner.getPerson()).build()
           ));
   ```

### **Gap Analysis - What Might Not Be Fully Compliant:**

#### ❌ **POTENTIAL ISSUE**: Individual Establishment Definition

The AC states "Individual establishment owners only", but the current implementation uses:
```java
establishmentEntity.isPrivate()  // This checks for LegalEntityType.PRIVATE_COMPANY
```

**Problem**: `isPrivate()` method checks for `PRIVATE_COMPANY` legal entity type, but "individual establishments" might refer to a different legal entity type (like sole proprietorship or individual business).

#### ❌ **POTENTIAL ISSUE**: Super Admin Check Logic

The current `findTargetAdmin()` method:
1. First tries to find a SUPER_ADMIN
2. If not found, tries to find any ADMIN  
3. Only then falls back to owner (and only for private establishments)

**Problem**: The requirement states to notify "current super admin or owner for individual establishment in case there is no active super admin". The current logic might send notifications to regular admins before checking owners.

### **What Needs Verification/Potential Fixes:**

1. **Legal Entity Type Clarification**: 
   - Need to confirm what constitutes an "individual establishment"
   - May need to add support for additional legal entity types beyond just `PRIVATE_COMPANY`

2. **Admin Role Priority**: 
   - The current logic checks for `Role.ADMIN` after `Role.SUPER_ADMIN`
   - Should probably go directly to owner if no super admin exists for individual establishments

3. **Implementation Suggestion**:
```java
// In findTargetAdmin method, for individual establishments:
if (isIndividualEstablishment(establishmentEntity)) {
    // First try super admin
    List<AdminEntity> superAdmins = admins.stream()
        .filter(a -> a.getAdminRoles().stream()
            .anyMatch(r -> r.getRole().getId().equals(Long.valueOf(Role.SUPER_ADMIN.getCode()))))
        .collect(Collectors.toList());
    
    if (!superAdmins.isEmpty()) {
        return Collections.singletonList(superAdmins.get(0));
    } else {
        // No super admin, fall back to owner
        return getActiveOwner(establishmentEntity);
    }
}
```

### **Summary:**
The notification system for admin termination is **largely implemented** but may need refinement to ensure it correctly identifies "individual establishments" and follows the exact notification priority specified in the user story (super admin OR owner, not regular admins).

Would you like me to suggest specific code changes to address these potential gaps?
