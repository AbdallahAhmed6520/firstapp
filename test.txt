# ๐ **ุงูุดุฑุญ ุงููุงูู ูุงูุดุงูู ููู Implementation ูู ุงูุฃูู ูููุงุก**

---

## ๐ฏ **1. ุงููุฏู ุงูุฃุณุงุณู ูู ุงููุดุฑูุน**

### **ุงููุดููุฉ:**
ุนูุฏู ูุงูู (Owner) ุจูุณุฌู ุฏุฎูู ุนูู ุงููุธุงูุ ูุนุงูุฒ ูุฎุชุงุฑ ุงูููุดุฃุฉ ุงููู ููุดุชุบู ุนูููุง.
ุงููุธุงู ูุญุชุงุฌ ููุชุฑุญ ูู ููุดุขุช ุจูุงุกู ุนูู **ุงูุฐูุงุก ุงูุงุตุทูุงุนู (AI)**.

### **ุงูุญู:**
ุฅูุดุงุก **API** ุฌุฏูุฏ ูุณุชุฏุนู ุฎุฏูุฉ ุงูู AI ููุฑุฌุน ุงูุชุฑุงุญุงุช ุฐููุฉ ููููุดุขุช.

---

## ๐งฉ **2. ุงูููููุงุช ุงูุฑุฆูุณูุฉ ูู ุงููุธุงู**

ูุจู ูุง ูุจุฏุฃุ ุฎูููู ุฃุดุฑุญูู ูู ููููู ูู ุงูู Architecture:

### **ุฃ. UI (User Interface) - Angular**
- ุฏู ุงููุงุฌูุฉ ุงููู ุงููุณุชุฎุฏู ุจูุดูููุง (ุงููููุน ุฃู ุงูุชุทุจูู).
- ุจูุจุนุช **HTTP Request** ููู backend ุนุดุงู ูุฌูุจ ุงูุจูุงูุงุช.

---

### **ุจ. Apigee (API Gateway)**
**ูุนูู ุฅูู API Gatewayุ**
- ุชุฎููู **ุญุงุฑุณ ุงูุจูุงุจุฉ** ุฃู **ุงูุฑูุณูุจุดู** ูู ุดุฑูุฉ.
- ุฃู ุทูุจ (request) ุฌุงู ูู UI ูุงุฒู ูุนุฏูู ุนูู Apigee ุงูุฃูู.

**ูุธููุชู:**
1. **ุงูุชุญูู ูู ุงููููุฉ (Authentication):**
   - ูุดูู ุฅู ุงูู request ููู API Key ุตุญูุญ.
   - ุฒู ูุง ุงูุญุงุฑุณ ูุชุฃูุฏ ุฅู ูุนุงู ุจุทุงูุฉ ุฏุฎูู.

2. **ุงูุฃูุงู (Security):**
   - ุจูุทุจูู ุณูุงุณุงุช ุฃูุงู (ูุซูุงู: AmeenSecurityCheck).
   - ุจูููุน ุงูุทูุจุงุช ุงููุดุจููุฉ ุฃู ุงูุถุงุฑุฉ.

3. **ุงูุชูุฌูู (Routing):**
   - ุจููุฌูู ุงูุทูุจ ููููุงู ุงูุตุญูุญ (Backendุ OSBุ ุฅูุฎ).

4. **Rate Limiting:**
   - ุจูุญุฏุฏ ุนุฏุฏ ุงูุทูุจุงุช ุงููู ูููู ุชุชุจุนุช ูู ุงูุฏูููุฉ/ุงูุณุงุนุฉ.
   - ูููุน ุงูู DDoS attacks.

---

### **ุฌ. OWS Backend (Owner Sphere Backend) - Java/Spring Boot**
**ุฏู ุงูููุจ ุงููุงุจุถ ูููุธุงู.**

**ูุธููุชู:**
- ุงุณุชูุจุงู ุงูุทูุจุงุช ูู Apigee.
- ุชูููุฐ **Business Logic** (ุงูููุทู ุงูุชุฌุงุฑู).
- ุงูุงุชุตุงู ุจููุงุนุฏ ุงูุจูุงูุงุช.
- ุงุณุชุฏุนุงุก ุฎุฏูุงุช ุฎุงุฑุฌูุฉ (ุฒู OSB ุฃู AI).
- ุฅุฑุฌุงุน ุงููุชูุฌุฉ ุงูููุงุฆูุฉ.

**ุงูุชูููุงุช ุงููุณุชุฎุฏูุฉ:**
- **Spring Boot** - Framework ููู Java
- **RestTemplate** - ููู HTTP Calls
- **JPA/Hibernate** - ููุชุนุงูู ูุน Database
- **Lombok** - ูุชุจุณูุท ุงูููุฏ

---

### **ุฏ. OSB (Oracle Service Bus)**
**ูุนูู ุฅูู Service Busุ**
- ุชุฎููู **ูุญุทุฉ ุงูุจุงุต** ุงููู ุจุชูุตู ุจูู ุฃูุงูู ูุฎุชููุฉ.
- ุฃู **ูุชุฑุฌู** ุจูู ูุธุงููู ูุง ุจูุชููููุด ููุณ ุงููุบุฉ.

**ูุธููุชู:**
- **Middleware** (ูุณูุท) ุจูู ุงูู Backend ูุงูุฎุฏูุงุช ุงูุฎุงุฑุฌูุฉ.
- ุจูุญููู ุตูุบุฉ ุงูุจูุงูุงุช (Transformation).
- ุจููุฌูู ุงูุทูุจุงุช ูุฃูุซุฑ ูู ุฌูุฉ (Routing).
- ุจูุนูู Logging ู Monitoring.

**ููู ูุญุชุงุฌูู OSBุ**
- ุนูุดุงู ููุตู ุงูู Backend ุนู ุงูุฎุฏูุงุช ุงูุฎุงุฑุฌูุฉ.
- ูู ุงูู AI service ุงุชุบูุฑ ููุงูู ุฃู ุทุฑููุชูุ ูุนุฏูู OSB ุจุณ.
- ุงูู Backend ูุง ูุชุฃุซุฑุด.

---

### **ูู. AI Service (ุฎุฏูุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู)**
**ุฏู ุงููุธุงู ุงููู ุจูุดุชุบู ุนููู ูุฑูู ุงูู AI.**

**ูุธููุชู:**
- ุงุณุชูุจุงู ุจูุงูุงุช ุงูููุดุฃุฉ (Registration Number).
- ุชุญููููุง ุจุงุณุชุฎุฏุงู **Machine Learning Models**.
- ุฅุฑุฌุงุน ูุงุฆูุฉ ุจุงูููุดุขุช ุงูููุชุฑุญุฉ ูุน ูุณุจุฉ ุงูุชุทุงุจู.

**ูุซุงู:**
```json
Request: { "regNo": 501234567 }

Response: {
  "suggestions": [
    {
      "establishmentId": 501999888,
      "establishmentName": "ุดุฑูุฉ ุงููุฌุงุญ ููุชุฌุงุฑุฉ",
      "matchScore": 0.92,
      "reason": "Similar industry"
    }
  ]
}
```

---

## ๐ **3. ุงูู Flow ุงููุงูู (ูู ุงูุจุฏุงูุฉ ููููุงูุฉ)**

### **ุงูุณููุงุฑูู:**
ูุงูู ุงุณูู "ุฃุญูุฏ" ุฏุฎู ุนูู ุงููุธุงูุ ูุนุงูุฒ ูุฎุชุงุฑ ุงูููุดุฃุฉ ุงููู ููุดุชุบู ุนูููุง.

---

### **ุงูุฎุทูุฉ 1: UI ุชุจุนุช Request**
```http
GET https://ameenfea12.apigee.net/v1/owner-sphere/b2b/501234567/suggestions
Headers:
  apikey: AbLvRAQpDbkKi9haiVOzydAGShiDhpGC
```

**ุดุฑุญ:**
- ุงูู URL ูููุง ุฑูู ุงูููุดุฃุฉ: `501234567`
- ุงูู `apikey` ุฏู ููุชุญูู ูู ูููุฉ ุงูุชุทุจูู.

---

### **ุงูุฎุทูุฉ 2: Apigee Proxy #1 ูุณุชูุจู ุงูุทูุจ**

**ุงูู Proxy:** `OSP_EstablishmentServiceAPIProxy`
**ุงููุณุงุฑ:** `/v1/owner-sphere/b2b/{regNo}/suggestions`

**ุงููู ุจูุญุตู ุฌูู Apigee:**
1. **PreFlow (Request):**
   ```xml
   <Step><Name>VerifyAPIKey</Name></Step>
   <Step><Name>AmeenSecurityCheck</Name></Step>
   ```
   - ุจูุชุญูู ูู ุงูู `apikey` ุตุญูุญ ููุง ูุฃ.
   - ูู ุบูุท โ ูุฑุฌุน **401 Unauthorized**.
   - ูู ุตุญ โ ูููู.

2. **Routing:**
   ```xml
   <TargetEndpoint>default</TargetEndpoint>
   ```
   - ุจููุฌูู ุงูุทูุจ ููู **OWS Backend**.

---

### **ุงูุฎุทูุฉ 3: OWS Backend ูุณุชูุจู ุงูุทูุจ**

#### **ุฃ. Controller ูุณุชูุจู ุงูุทูุจ**

๐ `B2BSuggestionsController.java`

```java
@RestController
@RequestMapping("/owner-sphere/b2b")
public class B2BSuggestionsController {

    @Autowired
    private OsbAiProxy osbAiProxy;

    @GetMapping("/{regNo}/suggestions")
    public ResponseEntity<SuggestionsResponse> getSuggestions(@PathVariable Long regNo) {
        log.info("Received request for regNo: {}", regNo);
        
        // ุงุณุชุฏุนุงุก ุงูู Proxy
        SuggestionsResponse response = osbAiProxy.fetchAiSuggestions(regNo);
        
        return ResponseEntity.ok(response);
    }
}
```

**ุดุฑุญ ุงูุณุทูุฑ:**

| ุงูุณุทุฑ | ุงูุดุฑุญ |
|-------|-------|
| `@RestController` | ุจูููู ูู Spring ุฅู ุฏู Controller ุจูุฑุฏ JSON |
| `@RequestMapping("/owner-sphere/b2b")` | ุงููุณุงุฑ ุงูุฃุณุงุณู |
| `@GetMapping("/{regNo}/suggestions")` | ุงููุณุงุฑ ุงููุฑุนู + HTTP Method |
| `@PathVariable Long regNo` | ุจูุงุฎุฏ ุงูุฑูู ูู ุงูู URL |
| `osbAiProxy.fetchAiSuggestions(regNo)` | ุจููุงุฏู ุนูู ุงูู Proxy Service |
| `ResponseEntity.ok(response)` | ุจูุฑุฌุน HTTP 200 ูุน ุงูู response |

---

#### **ุจ. Proxy Service ูููู Apigee**

๐ OsbAiProxy.java

```java
@Service
public class OsbAiProxy {

    @Value("${api.base.url}")
    private String apigeeBaseUrl;  // โ http://amnapigeedev.gosi.ins:9640

    @Value("${app.apikey}")
    private String apiKey;  // โ AbLvRAQpDbkKi9haiVOzydAGShiDhpGC

    private final RestTemplate restTemplate;

    public SuggestionsResponse fetchAiSuggestions(Long regNo) {
        String requestId = UUID.randomUUID().toString();
        log.info("[{}] Calling Apigee for regNo: {}", requestId, regNo);

        try {
            // 1๏ธโฃ ุจูุงุก ุงูู URL
            String url = String.format(
                "%s/v1/osb/ai/suggestions?regNo=%d", 
                apigeeBaseUrl, 
                regNo
            );
            // ุงููุชูุฌุฉ: http://amnapigeedev.gosi.ins:9640/v1/osb/ai/suggestions?regNo=501234567

            // 2๏ธโฃ ุฅุนุฏุงุฏ ุงูู Headers
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("X-Request-Id", requestId);
            headers.set("apikey", apiKey);  // โ ููุชุญูู ูู Apigee

            HttpEntity<String> entity = new HttpEntity<>(headers);

            // 3๏ธโฃ HTTP GET Request
            ResponseEntity<SuggestionsResponse> response = restTemplate.exchange(
                url,
                HttpMethod.GET,
                entity,
                SuggestionsResponse.class
            );

            return response.getBody();

        } catch (HttpClientErrorException e) {
            // 4xx errors
            log.error("Client error: {}", e.getStatusCode());
            return buildErrorResponse(requestId, "CLIENT_ERROR", "Invalid request");

        } catch (HttpServerErrorException e) {
            // 5xx errors
            log.error("Server error: {}", e.getStatusCode());
            return buildErrorResponse(requestId, "AI_SERVER_ERROR", "AI service error");

        } catch (ResourceAccessException e) {
            // Timeout
            log.error("Timeout: {}", e.getMessage());
            return buildErrorResponse(requestId, "AI_UNAVAILABLE", "AI unavailable");

        } catch (Exception e) {
            log.error("Unexpected error: {}", e.getMessage());
            return buildErrorResponse(requestId, "ERROR", "Unexpected error");
        }
    }

    private SuggestionsResponse buildErrorResponse(String requestId, String status, String message) {
        SuggestionsResponse fallback = new SuggestionsResponse();
        fallback.setStatus(status);
        fallback.setMessage(message);
        fallback.setSuggestions(Collections.emptyList());
        fallback.setRequestId(requestId);
        fallback.setTimestamp(Instant.now().toEpochMilli());
        return fallback;
    }
}
```

**ุดุฑุญ Error Handling:**

| ููุน ุงูุฎุทุฃ | ูุชู ูุญุตู | ุงูุฑุฏ |
|-----------|----------|------|
| `HttpClientErrorException` | ูู Apigee ุฑุฌุน 400/404 | `CLIENT_ERROR` |
| `HttpServerErrorException` | ูู OSB ุฃู AI ุฑุฌุน 500 | `AI_SERVER_ERROR` |
| `ResourceAccessException` | ูู ุญุตู Timeout | `AI_UNAVAILABLE` |
| `Exception` | ุฃู ุฎุทุฃ ุชุงูู | `ERROR` |

**ูู ูู ุงูุญุงูุงุช:** ุจูุฑุฌุน response ูููุง:
- `status`: ููุน ุงูุฎุทุฃ
- `suggestions`: ูุงุฆูุฉ ูุงุถูุฉ `[]`
- `message`: ุฑุณุงูุฉ ุชูุถูุญูุฉ

---

### **ุงูุฎุทูุฉ 4: Apigee Proxy #2 ูุณุชูุจู ุงูุทูุจ ูู Backend**

**ุงูู Proxy ุงูุฌุฏูุฏ:** `OSB_AISuggestionsProxy` โ **ูุงุฒู ููุนูู**
**ุงููุณุงุฑ:** `/v1/osb/ai/suggestions`

**ุงููู ุจูุญุตู:**
1. **PreFlow:**
   - ุจูุชุญูู ูู ุงูู `apikey` ุงููู Backend ุจุนุชู.
   
2. **Routing:**
   - ุจููุฌูู ุงูุทูุจ ููู **OSB**.

---

### **ุงูุฎุทูุฉ 5: OSB ููุตูู ููู AI**

**OSB** ุจูุงุฎุฏ ุงูุทูุจ ูู Apigee ููุจุนุชู ููู **AI Service**.

**ุงูู AI Service:**
- ุจูุณุชูุจู `regNo=501234567`
- ุจูุญูู ุงูุจูุงูุงุช ุจุงุณุชุฎุฏุงู ML Models
- ุจูุฑุฌุน ูุงุฆูุฉ ุงูุงูุชุฑุงุญุงุช:

```json
{
  "status": "SUCCESS",
  "suggestions": [
    {
      "establishmentId": 501999888,
      "establishmentName": "ุดุฑูุฉ ุงููุฌุงุญ ููุชุฌุงุฑุฉ",
      "matchScore": 0.92,
      "reason": "Similar industry",
      "industry": "Retail",
      "location": "Riyadh"
    },
    {
      "establishmentId": 501777666,
      "establishmentName": "ูุคุณุณุฉ ุงูุชุฌุงุฑุฉ ุงููุชูุฏูุฉ",
      "matchScore": 0.85,
      "reason": "Same owner network",
      "industry": "Wholesale",
      "location": "Jeddah"
    }
  ]
}
```

---

### **ุงูุฎุทูุฉ 6: ุงูุฑุฏ ูุฑุฌุน ุนูุณ ุงููุณุงุฑ**

```
AI โ OSB โ Apigee #2 โ Backend โ Apigee #1 โ UI
```

---

## ๐ฆ **4. DTOs (Data Transfer Objects)**

### **ุฃ. SuggestionsResponse**
```java
public class SuggestionsResponse {
    private String status;              // ุญุงูุฉ ุงูุทูุจ
    private List<EstablishmentSuggestion> suggestions;  // ุงููุงุฆูุฉ
    private String message;             // ุฑุณุงูุฉ ุฅุถุงููุฉ
    private String requestId;           // ููู tracking
    private Long timestamp;             // ููุช ุงูุฑุฏ
}
```

### **ุจ. EstablishmentSuggestion**
```java
public class EstablishmentSuggestion {
    private Long establishmentId;       // ุฑูู ุงูููุดุฃุฉ
    private String establishmentName;   // ุงูุงุณู
    private Double matchScore;          // ูุณุจุฉ ุงูุชุทุงุจู (0-1)
    private String reason;              // ุณุจุจ ุงูุงูุชุฑุงุญ
    private String industry;            // ุงููุดุงุท
    private String location;            // ุงููููุน
}
```

---

## โ๏ธ **5. Configuration (ุงูุฅุนุฏุงุฏุงุช)**

### **ูู application-local.properties:**

```properties
# Apigee URL
api.base.url=http://amnapigeedev.gosi.ins:9640

# API Key
app.apikey=AbLvRAQpDbkKi9haiVOzydAGShiDhpGC

# OSB Proxy Path
osb.ai.apigee.path=/v1/osb/ai/suggestions

# Timeout
osb.ai.timeout=10000
```

**ุดุฑุญ:**
- `api.base.url`: ุนููุงู Apigee
- `app.apikey`: ุงูููุชุงุญ ููุชุญูู
- `osb.ai.apigee.path`: ุงููุณุงุฑ ููู Proxy ุงูุชุงูู
- `osb.ai.timeout`: ุงูุงูุชุธุงุฑ ุงูุฃูุตู (10 ุซูุงูู)

---

## ๐งช **6. ุงูุงุฎุชุจุงุฑ**

### **Request:**
```bash
curl -X GET \
  'https://ameenfea12.apigee.net/v1/owner-sphere/b2b/501234567/suggestions' \
  -H 'apikey: AbLvRAQpDbkKi9haiVOzydAGShiDhpGC'
```

### **Response (Success):**
```json
{
  "status": "SUCCESS",
  "suggestions": [
    {
      "establishmentId": 501999888,
      "establishmentName": "ุดุฑูุฉ ุงููุฌุงุญ ููุชุฌุงุฑุฉ",
      "matchScore": 0.92,
      "reason": "Similar industry",
      "industry": "Retail",
      "location": "Riyadh"
    }
  ],
  "message": null,
  "requestId": "abc-123-xyz",
  "timestamp": 1729612345000
}
```

### **Response (Error - AI Unavailable):**
```json
{
  "status": "AI_UNAVAILABLE",
  "suggestions": [],
  "message": "AI service is temporarily unavailable",
  "requestId": "def-456-uvw",
  "timestamp": 1729612350000
}
```

---

## ๐ **7. ุงูุฃูุงู (Security)**

### **ุงููุณุชููุงุช:**
1. **API Key ูู Apigee:**
   - ูู request ูุงุฒู ููู `apikey`
   - ูู ูุด ููุฌูุฏ โ 401

2. **AmeenSecurityCheck:**
   - ูุญุต ุฃููู ุฅุถุงูู ุฏุงุฎูู
   - ุจูุชุฃูุฏ ูู ุงููุตุฏุฑ

3. **OAuth 2.0 (ุงุฎุชูุงุฑู):**
   - ููุญูุงูุฉ ุงูุฃููู

---

## ๐ **8. ุงูุฎูุงุตุฉ ุงูููุงุฆูุฉ**

### **ุงูููููุงุช:**
| ุงูููููู | ุงููุธููุฉ | ุงูุชูููุฉ |
|---------|---------|---------|
| UI | ุงููุงุฌูุฉ | Angular |
| Apigee #1 | ุฃูุงู + ุชูุฌูู | API Gateway |
| Backend | ููุทู ุงูุนูู | Spring Boot |
| Apigee #2 | ูุณูุท ูู OSB | API Gateway |
| OSB | ุชุญููู + ุชูุฌูู | Oracle Service Bus |
| AI | ุงูุฐูุงุก ุงูุงุตุทูุงุนู | ML Models |

### **ุงูู Flow:**
```
UI โ Apigee #1 โ Backend โ Apigee #2 โ OSB โ AI
                                              โ
UI โ Apigee #1 โ Backend โ Apigee #2 โ OSB โ AI
```

### **ุงููููุงุช:**
1. `B2BSuggestionsController.java` - REST Controller
2. OsbAiProxy.java - HTTP Client
3. `SuggestionsResponse.java` - DTO
4. `EstablishmentSuggestion.java` - DTO
5. osp.properties - Configuration

---

**ูู ููู ุฃู ุฌุฒุก ูุญุชุงุฌ ุชูุถูุญ ุฃูุชุฑุ** ๐ค
